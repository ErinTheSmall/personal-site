{"version":3,"sources":["Song.tsx","SongList.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Song","props","name","artists","link","id","aggregatedArtists","length","i","className","href","style","clear","SongList","tracks","undefined","map","track","ytSongLink","App","state","history","fetch","then","result","text","newHistory","JSON","parse","setState","this","currentTrack","isPlaying","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"6SAkCeA,G,YAxBkC,SAACC,GAAW,IAClDC,EAA2BD,EAA3BC,KAAMC,EAAqBF,EAArBE,QAASC,EAAYH,EAAZG,KAAMC,EAAMJ,EAANI,GACxBC,EAAoB,GACxB,GAAsB,IAAnBH,EAAQI,OACPD,EAAoBH,EAAQ,OAE3B,CACD,IAAIK,EACJ,IAAIA,EAAI,EAAGA,EAAIL,EAAQI,OAAS,EAAGC,IAC/BF,GAAqBH,EAAQK,GAAK,KAEtCF,GAAqBH,EAAQA,EAAQI,OAAS,GAElD,OACI,oCACI,yBAAKE,UAAU,OAAOJ,GAAIA,GACtB,uBAAGK,KAAMN,GAAM,0BAAMK,UAAU,SAASP,GAAxC,IAAqD,0BAAMO,UAAU,WAAhB,KAA6BH,IAClF,8BAEJ,wBAAIK,MAAO,CAACC,MAAO,aCDhBC,EApB0C,SAACZ,GAAW,IAC1Da,EAAUb,EAAVa,OACP,YAAeC,IAAXD,EAEI,0CAKA,yBAAKL,UAAU,YAEXK,EAAOE,KAAI,SAACC,GACR,OAAQ,kBAAC,EAAD,CAAMf,KAAMe,EAAMf,KAAMC,QAASc,EAAMd,QAASC,KAAMa,EAAMC,kBCkCzEC,E,YAzCb,WAAYlB,GAAgB,IAAD,8BACzB,4CAAMA,KACDmB,MAAQ,CACTC,aAASN,GAHY,E,iFAOR,IAAD,OAChBO,MAAM,sCACLC,MAAK,SAAAC,GACF,OAAOA,EAAOC,UAEjBF,MAAK,SAAAC,GACF,IAAIE,EAAsBC,KAAKC,MAAMJ,GACrC,EAAKK,SAAS,CAACR,QAASK,S,+BAK5B,OACE,yBAAKjB,UAAU,OACb,4BAAQA,UAAU,cAChB,kDAGwBM,GAAtBe,KAAKV,MAAMC,cAC0BN,GAAnCe,KAAKV,MAAMC,QAAQU,aACjB,kBAAC,EAAD,CACI1B,GAAI,eAAiByB,KAAKV,MAAMC,QAAQU,aAAaC,UAAY,YAAc,YAC/E9B,KAAM4B,KAAKV,MAAMC,QAAQU,aAAa7B,KACtCC,QAAS2B,KAAKV,MAAMC,QAAQU,aAAa5B,QACzCC,KAAM0B,KAAKV,MAAMC,QAAQU,aAAab,kBAChCH,EAElB,kBAAC,EAAD,CAAUD,YAA+BC,IAAvBe,KAAKV,MAAMC,QAAwBS,KAAKV,MAAMC,QAAQP,YAASC,IACjF,uBAAGN,UAAU,QAAb,iCAAkD,uBAAGC,KAAK,2CAAR,e,GApCxCuB,IAAMC,WCAJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDqI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMvB,MAAK,SAAAwB,GACjCA,EAAaC,kB","file":"static/js/main.c16ce96c.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Song.css'\r\n\r\ntype SongProps = {\r\n    name: string,\r\n    artists: string[],\r\n    link: string,\r\n    id?: string,\r\n}\r\n\r\nconst Song: React.FunctionComponent<SongProps> = (props) => {\r\n    const {name, artists, link, id} = props;\r\n    var aggregatedArtists = \"\";\r\n    if(artists.length === 1){\r\n        aggregatedArtists = artists[0];\r\n    }\r\n    else {\r\n        var i;\r\n        for(i = 0; i < artists.length - 1; i++) {\r\n            aggregatedArtists += artists[i] + \", \";\r\n        }\r\n        aggregatedArtists += artists[artists.length - 1];\r\n    }\r\n    return (\r\n        <>\r\n            <div className=\"song\" id={id}>\r\n                <a href={link}><span className=\"title\">{name}</span> <span className=\"artists\">- {aggregatedArtists}</span></a>\r\n                <hr />\r\n            </div>\r\n            <br style={{clear: 'both'}} />\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Song;","import React from 'react';\r\nimport { Track } from './History'\r\nimport Song from './Song'\r\n\r\ntype SongListProps = {\r\n    tracks?: Track[],\r\n}\r\n\r\nconst SongList: React.FunctionComponent<SongListProps> = (props) => {\r\n    const {tracks} = props;\r\n    if (tracks === undefined) {\r\n        return (\r\n            <h2>Loading...</h2>\r\n        )\r\n    }\r\n    else {\r\n        return (\r\n            <div className=\"songlist\">\r\n            {\r\n                tracks.map((track)=> {\r\n                    return (<Song name={track.name} artists={track.artists} link={track.ytSongLink}/>)\r\n                })\r\n            }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default SongList;\r\n","import React from 'react';\nimport './App.css';\nimport { History } from './History'\nimport Song from './Song';\nimport SongList from './SongList';\n\ninterface IProps {\n}\ninterface IState {\n  history?: History,\n}\n\nclass App extends React.Component<IProps, IState> {\n  constructor(props: IProps) {\n    super(props);\n    this.state = {\n        history: undefined,\n    }\n  }\n\ncomponentDidMount() {\n    fetch(\"https://galenguyer.com/api/spotify\")\n    .then(result => {\n        return result.text();    \n    })\n    .then(result => {\n        let newHistory: History = JSON.parse(result);\n        this.setState({history: newHistory})\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1>Recent Songs</h1>\n        </header>\n        {\n            this.state.history != undefined ? \n              this.state.history.currentTrack != undefined ?\n                <Song\n                    id={\"currentSong\" + (this.state.history.currentTrack.isPlaying ? \"isPlaying\" : \"isPaused\")}\n                    name={this.state.history.currentTrack.name} \n                    artists={this.state.history.currentTrack.artists}\n                    link={this.state.history.currentTrack.ytSongLink} />\n            : undefined : undefined\n        }\n        <SongList tracks={this.state.history !== undefined ? this.state.history.tracks : undefined}/>\n        <p className=\"note\">Read a bit about this project <a href=\"https://galenguyer.com/projects#spotify\">here!</a></p>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}